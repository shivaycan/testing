Description
Plant Nursery App

The "Natures Love" plant nursery shop approaches you to create an online application to enhance their service. The shop is selling different types of plants in their shop. They are in need of a separate online portal that should support the below business activities.

 Add Plants
Update Plant Quantity
View Plants Based On Type
View Plants Based On Price Range
The client wishes to have restful webservices for adding Plants, viewing plants based on type, viewing plants based on the price range and updating Plant quantity. 

Help them to automate the above process by developing Rest Service using Maven and incorporate microservices for the same.


Code Skeleton
Click here to download the problem statement

Click here to download the Code Skeleton - Service

Click here to download the Code Skeleton - Registry

Click here to download the Code Skeleton - Router

Click here to download the Code Skeleton - Application

Click here to download the Code Skeleton - GreetingApp

Plant Nursery App (Spring Boot + Microservices)
1.0Introduction

1.0Functional Requirements
The "Natures Love" plant nursery shop approaches you to create an online application to enhance their service. The shop is selling different types of plants in their shop. They are in need of a separate online portal that should support the below business activities.
•	 Add Plants
•	Update Plant Quantity
•	View Plants Based On Type
•	View Plants Based On Price Range
The client wishes to have restful webservices for adding Plants, viewing plants based on type, viewing plants based on the price range and updating Plant quantity.

Help them to automate the above process by developing Rest Service using Maven and incorporate microservices for the same.
2.0 Technical Specifications
The provided PlantController which is a RestController, should be created with the following services:
Services:
Request Method	Request Url	Description
Post	/addPlant	This service should add the Plant details by using the addPlant method of the PlantServiceImpl
Put	/updateQuantity/{plantId}/{quantity}	This service should update the quantity of the existing Plant by using the updateQuantity of the PlantServiceImpl
Get	/viewPlantsByType/{plantType}	This service should retrieve the list of existing Plant details which is of the given plantType by using viewPlantsByType of the PlantServiceImpl
Get	/viewPlantsInAPriceRange/{lowlimit}/{upperlimit}	This method should return the list of Plant details whose price falls within the given range by using viewPlantsInAPriceRange of the PlantServiceImpl.

IPlantService service;

It should be injected inside the Controller via annotations

Microservice Specification:
•	Spring boot application should contain all the REST services implementation as per the case study specification.
•	The Spring rest service application should have the application name as “plantnurseryapp” in the  application.properties.
•	Register the spring rest service application with the Eureka server which should run in port 8761.

API Gateway Server:

•	Implement API Gateway using Cloud API Gateway
•	Must contain a routing information for the below URI mapping to the actual service implementation that is running in the port 9091
•	/addPlant URI mapping,
•	/updateQuantity{plantId}/{quantity} URI mapping
•	/viewPlantsByType/{plantType} URI mapping and
•	/viewPlantsInAPriceRange/{lowlimit}/{upperlimit} URI.

•	The API gate way server port (8777) must be specified in the “application.properties” file.
•	The service must be accessible through API gateway using small-case url.


Service Layer
Refer to the IPlantService interface provided as part of the code skeleton. The PlantServiceImpl which is provided as part of the code skeleton has to realize all the methods in the IPlantService interface

PlantServiceImpl class should be configured via annotation as Service

PlantServiceImpl
Attribute Name	Attribute Type	Access Specifier	Constraints
plantList	List<Plant>	private	static

Method in Service	Description	Exception
addPlant	This method should add the Plant details to the plantList and return the Plant object.
Use SLF4J and log the success message as “Plant with Plant Id<<plantId>> added successfully”	If a Plant already exists with the same plantId, then throw a user defined exception
InvalidPlantException with the message “Plant with <<plantId>>already exists!”
Use SLF4J and log this as an error message
updatePlantQuantity	This method accepts pantId and quantity as arguments. It should iterate the plantList and replace the existing quantity of the Plant with the quantity parameter based on the plantId passed as the parameter.
	If no Plant exists in that plantId, throw InvalidPlantException with the message
 “Invalid Plant Id"
Use SLF4J and log this as an error message
viewPlantsByType	This method accepts plantType  as an argument. This method should iterate the plantList and retrieve the list of Plants with the passed plantType as their plantType

	
viewPlantsInAPriceRange	This method accepts lowlimit and upperlimit  as arguments. This method should iterate the plantList and retrieve the list of Plants whose price should be greater than or equal to the lowlimit and  less than or equal to the upperlimit 

	



To perform logging, you are provided with logger.xml file.  In PlantServiceImpl  when the success / error messages are logged using SLF4J, they get entered into logs/mylogs.log  file in the project directory.


Exception Class

Refer to the InvalidPlantException class provided as part of the code skeleton. This class should extend the Exception class. Provide the needed annotation so that it handles HttpStatus as NOT_FOUND


Model Class
Refer to the Plant class provided as part of the class diagram/code skeleton, use appropriate annotation to generate getter/setter and a no argument constructor.

Attribute	Data type
plantId	String
plantName	String
quantity	int
plantType	String
price	double


  

Note:
•	Use Lombok to generate getters and setters for the attributes
•	Also generate all-argument constructor and no argument constructor using lombok
•	Do not change the datatype or the attribute name provided as part of the code skeleton



BusinessValidation

Inbuilt Validation

Rule	Message when validation fails
Plant Id should not be empty	Provide value for Plant Id
Plant name should not be empty	Provide value for Plant name
Minimum quantity should be 1	Provide value greater than zero
Plant type should not be empty	Provide value for Plant type


Perform the above Validations using annotations that are available in javax.validation.constraints package



Incorporate Exception and validations as ResponseEntity

To  incorporate the messages related to Exception and validations (both  custom and inbuilt validations)as ResponseEntity, you are provided with the following classes

•	ExceptionResponse class that represents what attributes needs to be there in the customized response error message. Make use of this class to send the customized response error message.
•	CustomizedResponseEntityExceptionHandler  class to handle all the exceptions that has occurred in the application(both user defined and pre defined).


Method Name	Explanation
handleAllExceptions	This method should generally handle all the exceptions.
In ResponseEntity set the HTTPStatus as INTERNAL_SERVER_ERROR.
handleNotFoundException	This method should handle and provide customized error message using Exception Response class for user defined exception InvalidPlantException 
In ResponseEntity set the HTTPStatus as NOT_FOUND.
handleMethodArgumentNotValid	This method should handle and provide customized error message using Exception Response class for both pre-defined and user defined validations.
In ResponseEntity set the HTTPStatus as BAD_REQUEST.



Note :  
•	In CustomizedResponseEntityExceptionHandler class,  log all the error messages using SLF4J.Use Lombok annotations for logging.

3.0 Process Flow


•	The Client invokes the required service.
•	Controller invokes the method of the PlantServiceImpl.
•	PlantServiceImpl performs the service and returns the data back.
•	IPlantService has to be injected into the PlantController.
•	Use appropriate annotations for performing the validations.
•	To perform logging, you are provided with the log4j.xml file.
•	Use Lombok to create getters and setters in Plant, PlantServiceImpl and ExceptionResponse class.
•	Configure logging using Slf4j annotation with Lombok in PlantServiceImpl and CustomizedResponseEntityExceptionHandlerclass.
•	When multiple validations fail, concatenate all messages as a single string and store it in the details attribute of the ExceptionResponse object.
Architecture diagram:

  


4.0	Microservices implementation Guidelines

For Microservices implementation, we will be implementing 3 projects.
l	Spring Cloud (Eureka-Server) for service registry and discovery
l	Spring Boot for REST service creation
l	Spring Cloud gateway for API Gateway
Project 1:
This project should be the Eureka-Server acting as the registry. Run this server in port 876
 
Project 2:

This project should be a spring boot application containing all the REST services implemented as per the requirements stated in the case study.
These services must be registered with Eureka-Server.
Run the services in port 9090.Services should get automatically registered with the Eureka Registry After the service is registered,
 

Note:
l	Applicationname should be given as plantnurseryapp as specified in the case study.
l	Eureka Registry should run only in port 8761
l	You can change application port number ie 9090 if required.

Project 3:

This must be a Spring cloud gateway project that contains the routing implementation to the actual services running in port 9090. Run this in port 8777
 



          GateWay
 
             SpringRestService                                        EurekaRegistry



4.0 Overall Design Constraints

1.	Do not change the property name given in the application.properties files, you can change the value and you can include additional property if needed.
2.	In the pom.xml you are provided with all the dependencies needed for developing the application.  Do not change or add new dependencies
3.	Use the service type and the service names as expected in the specification
4.	Adhere to the design specifications mentioned in the case study.
5.	Do not change or delete the class/method names or return types that are provided to you as part of the base code skeleton.
6.	Services can be tested using external tools like postman by the associate.
7.	Please make sure that your code does not have any compilation errors while submitting your case study solution.
8.	Your code will not get evaluated if the code skeleton is altered.
 
5.0 Output –Sample Screen shots in Postman 
1.	Rest service for /addPlant with valid Plant details
  


2.	Rest service for /addPlant with empty plantName,  invalid plantId  and quantity
 
3.	Rest service for  /updatePlantQuantity/{plantId}/{quantity} with valid plantId and quantity
 


4.	Rest service for /viewPlantsByType/{plantType}

 






 
PART -II
INTER MICROSERVICE CONFIGURATION


The information about the agency is provided by the PlantNurseryAppGreeting microservice. The PlantNurseryAppGreeting microservice has the below service method. This service method is present in the GreetingController class


Request Method	Request Url	Method in Controller	Description
Get	/welcome	greeting	This service will display the information about the plant.


The solution for the PlantNurseryAppGreeting is provided as part of the code skeleton, you just need to use this microservice in PlantNurseryAppApplication microservice.
The PlantNurseryAppApplication microservice is responsible for using the welcome service present in the PlantNurseryAppGreeting  microservice. The PlantNurseryAppApplication has the below service. This service is present in the ApplicationController which is a RestController.


Request Method	Request Url	Method in Controller	Description
Get	/greet	retreiveInfo	This service will display the information about the Plant by invoking the welcome service of the PlantNurseryAppGreeting Microservice.

Note: Use inter microservice communication – Feign Client


The below proxy interface named ServiceProxy is provided in the PlantNurseryAppApplication Microservice. Use appropriate annotation in this proxy for performing inter microservice communication.
The ServiceProxy should be injected in the ApplicationController. Multiple clients will be accessing the greet service present in the PlantNurseryAppApplication Microservice, so ensure the load balancing is done accordingly using client side load balancer – RibbonWhen the client invokes the greet service, there can be possibilities where the remote service(welcome service of PlantNurseryAppGreeting microservice) might not be available. Handle this failure by using circuit breaker. Also use fallback method in the circuit breaker to display the appropriate message.


Output –Sample Screen shots in postman
1.	Rest service for /greet

                  

2.	Rest service for /greet when the /welcome service is unavailable in PlantNurseryAppGreeting Microservice

                      
package com.plantnursery.app;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;



@SpringBootApplication
public class PlantNurseryAppApplication {

	public static void main(String[] args) {
		SpringApplication.run(PlantNurseryAppApplication.class, args);
	}

}


package com.plantnursery.controller;

import java.util.List;

import com.plantnursery.exception.InvalidPlantException;
import com.plantnursery.model.Plant;
import com.plantnursery.service.IPlantService;


public class PlantController {
	

	private IPlantService service;
	
	
	public Plant addPlant(Plant plantObj) throws InvalidPlantException
	{
		return null;
	}
	
	public Plant updatePlantQuantity(String plantId,int quantity) throws InvalidPlantException
	{
		return null;
	}
	
	
	public List<Plant> viewPlantsByType(String plantType)
	{
		return null;
	}
	
	
	public List<Plant> viewPlantsInAPriceRange(double lowlimit,double upperlimit)
	{
		return null;
	}
}



package com.plantnursery.exception;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;


public class CustomizedResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {


	
	public final ResponseEntity<Object> handleAllExceptions(Exception ex, WebRequest request) {

		
		return null;
	}

	
	public final ResponseEntity<ExceptionResponse> handleNotFoundException(InvalidPlantException ex, WebRequest request) {
		
		return null;
	}	
	
	

	@Override
protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
		HttpHeaders headers, HttpStatusCode status, WebRequest request) {	
	

		return null;
	}



}




package com.plantnursery.exception;

import java.time.LocalDate;

public class ExceptionResponse {
	  private LocalDate timestamp;
	  private String message;
	  private String details;
	  private String httpCodeMessage;
	public LocalDate getTimestamp() {
		return timestamp;
	}
	public void setTimestamp(LocalDate timestamp) {
		this.timestamp = timestamp;
	}
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	public String getDetails() {
		return details;
	}
	public void setDetails(String details) {
		this.details = details;
	}
	public String getHttpCodeMessage() {
		return httpCodeMessage;
	}
	public void setHttpCodeMessage(String httpCodeMessage) {
		this.httpCodeMessage = httpCodeMessage;
	}
	public ExceptionResponse(LocalDate timestamp, String message, String details, String httpCodeMessage) {
		super();
		this.timestamp = timestamp;
		this.message = message;
		this.details = details;
		this.httpCodeMessage = httpCodeMessage;
	}	 	  	    	    	     	      	 	
	public ExceptionResponse() {
		
	}
	  

}


package com.plantnursery.exception;


public class InvalidPlantException extends Exception {
	
	
	



}


package com.plantnursery.model;


public class Plant {
	
	
	private String plantId;
	private String plantName;
	private int quantity;
	private String plantType;
	private double price;


}
package com.plantnursery.service;

import java.util.List;

import com.plantnursery.exception.InvalidPlantException;
import com.plantnursery.model.Plant;

public interface IPlantService {
	
	public Plant addPlant(Plant plantObj)throws InvalidPlantException;
	public Plant updatePlantQuantity(String plantId, int quantity) throws InvalidPlantException;
	public List<Plant> viewPlantsByType(String plantType);
	public List<Plant> viewPlantsInAPriceRange(double lowlimit, double upperlimit);
}


package com.plantnursery.service;

import java.util.ArrayList;
import java.util.List;

import com.plantnursery.exception.InvalidPlantException;
import com.plantnursery.model.Plant;


public class PlantServiceImpl implements IPlantService {
	
private static List<Plant> plantList=new ArrayList<Plant>();

	public static List<Plant> getPlantList() {
		return plantList;
	}

	public static void setPlantList(List<Plant> plantList) {
		PlantServiceImpl.plantList = plantList;
		
	}
		
	public PlantServiceImpl()
	{

	}
	public Plant addPlant(Plant plantObj)throws InvalidPlantException
	{
		
				
			return null;
		
	}
	public Plant updatePlantQuantity(String plantId, int quantity) throws InvalidPlantException
	{
		return null;
	}
	
	public List<Plant> viewPlantsByType(String plantType)
	{
		return null;
	}
	public List<Plant> viewPlantsInAPriceRange(double lowlimit, double upperlimit)
	{
		return null;
    }
}
server.port=9090
logging.config=src/main/resources/logger.xml


<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <property name="HOME_LOG" value="log/mylogs.log"/>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n
            </Pattern>
        </layout>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>${HOME_LOG}</file>
        
        <append>true</append>
        <encoder>
            <pattern>[%-5level] %d{dd-MM-yyyy hh:mm:ss.SSS a} [%thread]  %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>


<!-- additivity as false appends only to file and not to console -->
    <logger name="com.plantnursery.service" level="info" additivity="false">
        <!-- <appender-ref ref="CONSOLE"/> -->
        <appender-ref ref="FILE"/>
    </logger>

	<logger name="com.plantnursery.exception" level="info" additivity="false">
        <!-- <appender-ref ref="CONSOLE"/> -->
        <appender-ref ref="FILE"/>
    </logger>
	
    <root level="debug">
        <appender-ref ref="CONSOLE"/>
    </root>
</configuration>
	 	  	    	
REGISTRY

    package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RegistryApplication {

	public static void main(String[] args) {
		SpringApplication.run(RegistryApplication.class, args);
	}

}

	 server.port = 8761
    	      	 	
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>Registry</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Registry</name>
	<description>Registry</description>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2022.0.2</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>netflix-candidates</id>
			<name>Netflix Candidates</name>
			<url>https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>

.classpath
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>Registry</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Registry</name>
	<description>Registry</description>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2022.0.2</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>netflix-candidates</id>
			<name>Netflix Candidates</name>
			<url>https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>


GATEWAY
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class GatewayApplication {

	public static void main(String[] args) {
		SpringApplication.run(GatewayApplication.class, args);
	}

}
server.port=8777
spring.application.name=gateway

spring.application.name=gateway
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.consul.discovery.health-check-path=/actuator/health


<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>Gateway</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Gateway</name>
	<description>Gateway</description>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2022.0.2</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
			
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
			
    <!-- Spring Boot Starter -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
       
    </dependency>
    


	  
	  
	  
		
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>netflix-candidates</id>
			<name>Netflix Candidates</name>
			<url>https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>


package com.plantnursery.app;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;


@SpringBootApplication
public class PlantNurseryApplication {

	public static void main(String[] args) {
		SpringApplication.run(PlantNurseryApplication.class, args);
	}

}


package com.plantnursery.controller;


public class ApplicationController {

	
	
}
	 	  	    	    		        	 	
package com.plantnursery.proxy;


public interface ServiceProxy {
	
	
	   public String greeting();


}

server.port=8090

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.plantnursery</groupId>
	<artifactId>PlantNurseryApplication</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>PlantNurseryApplication</name>
	<description>PlantNurseryApplication</description>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2022.0.2</spring-cloud.version>
	</properties>
	<dependencies>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-loadbalancer</artifactId>
</dependency>

	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>generate-docs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>process-asciidoc</goal>
						</goals>
						<configuration>
							<backend>html</backend>
							<doctype>book</doctype>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.springframework.restdocs</groupId>
						<artifactId>spring-restdocs-asciidoctor</artifactId>
						<version>${spring-restdocs.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>netflix-candidates</id>
			<name>Netflix Candidates</name>
			<url>https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>


package com.plantnursery.app;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
@ComponentScan(basePackages= {"com.plantnursery.controller"})
public class PlantNurseryGreetingApplication {

	public static void main(String[] args) {
		SpringApplication.run(PlantNurseryGreetingApplication.class, args);
	}

}
package com.plantnursery.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class GreetingController {

	
	@GetMapping(value="/welcome")
	public @ResponseBody String greeting( ) {
		
		return "Welcome to Nature Love Plant Nursery!!!!!";
		
	}
}


server.port=8091

Result description
 CODE SKELETON VIOLATIONS
Comment :=>>- SKELETON VIOLATIONS
Comment :=>>  Unable to find the given public method getPlantId in the class com.plantnursery.model.Plant. Do not change the given public method name. Verify it with the skeleton--|>



