package org.example.academy.service;


import org.example.academy.model.Assessment;
import org.example.academy.model.Question;
import org.example.academy.model.Submission;
import org.example.academy.model.User;
import org.example.academy.repository.AssessmentRepository;
import org.example.academy.repository.UserRepository;
import org.example.academy.repository.SubmissionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Service
public class SubmissionService {

    @Autowired
    private SubmissionRepository submissionRepository;

    @Autowired
    private AssessmentRepository assessmentRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EmailService emailService;

    // Create submission
    public Submission createSubmission(Long assessmentId, Long studentId, Map<Long, String> answers) {
        if (submissionRepository.existsByAssessment_AssessmentIdAndStudent_Id(assessmentId, studentId)) {
            throw new IllegalStateException("Student " + studentId + " already has a submission");
        }

        // Check if the assessment and student attempting exist or not
        Assessment assessment = assessmentRepository.findById(assessmentId)
                .orElseThrow(() -> new IllegalArgumentException("Assessment not found"));
        User student = userRepository.findById(studentId)
                .orElseThrow(() -> new IllegalArgumentException("Student not found"));

        List<Question> questions = assessment.getQuestions();
        //if (answers.size() != questions.size()) {
       //     throw new IllegalArgumentException("All questions must be answered");
       // }

        // Assessment and student exist (yes), all the questions are answered (yes)
        // Append answers in the database
        Submission submission = new Submission(assessment, student, answers);
        Submission savedSubmission = submissionRepository.save(submission);

        // Send notification
        String subject = "New Submission Received";
        String body = "A new submission has been received for the assessment: " + assessment.getType();
        emailService.sendEmail(student.getEmailid(), subject, body);

        return savedSubmission; // DB gives it an ID and stores it
    }

    // Grade submission
    public Submission gradeSubmission(Long submissionId) {
        Submission submission = submissionRepository.findById(submissionId)
                .orElseThrow(() -> new IllegalArgumentException("Submission not found"));

        // No re-grading is allowed
        if ("GRADED".equals(submission.getStatus())) {
            throw new IllegalStateException("Submission has already been graded");
        }

        // Now let's grade
        Assessment assessmentDetails = submission.getAssessment();
        List<Question> questionsDetails = assessmentDetails.getQuestions();
        Map<Long, String> studentAnswers = submission.getAnswers();
        int correctAnswers = 0;

        for (Question question : questionsDetails) {
            String correctAnswer = question.getCorrectAnswer();
            String studentAnswer = studentAnswers.get(question.getQuestionId());
            if (studentAnswer != null && studentAnswer.equalsIgnoreCase(correctAnswer)) {
                correctAnswers++;
            }
        }

        int percentageScored = (correctAnswers / questionsDetails.size()) * 100;
     //    int percentageScored = 78;

        submission.setScore(percentageScored);
        Submission gradedSubmission = submissionRepository.save(submission);

        // Send notification
        String subject = "Submission Graded";
        String body = "Your submission has been graded with a score of: " + submission.getScore() + "%";
        emailService.sendEmail(submission.getStudent().getEmailid(), subject, body);

        return gradedSubmission;
    }

    public Submission getSubmission(Long submissionId) {
        return submissionRepository.findById(submissionId)
                .orElseThrow(() -> new IllegalArgumentException("Submission not found"));
    }
}
