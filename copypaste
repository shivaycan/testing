package com.example.shiksha.repository;

import com.example.shiksha.model.Submission;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface SubmissionRepository extends JpaRepository<Submission,Long> {

    boolean existsByAssessmentIdAndStudentId(Long assessmentId,Long studentId);

    List<Submission> findByStudentId(Long studentId);

    //gets all submission for a quiz-handy for grading everyone
    List<Submission> findByAssessmentId(Long assessmentId);
}


package com.example.shiksha.service;

import com.example.shiksha.model.Assessment;
import com.example.shiksha.model.Question;
import com.example.shiksha.model.Submission;
import com.example.shiksha.model.User;
import com.example.shiksha.repository.AssessmentRepository;
import com.example.shiksha.repository.SubmissionRepository;
import com.example.shiksha.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Service
public class SubmissionService {
    @Autowired
    private SubmissionRepository submissionRepository;
    @Autowired
    private AssessmentRepository assessmentRepository;

    @Autowired
    private UserRepository userRepository;


    //create submission
    public Submission createSubmission(Long assessmentId,Long studentId,Map<Long,String> answers) {
        if (submissionRepository.existsByAssessmentIdAndStudentId(assessmentId, studentId)) {
            throw new IllegalStateException("Student " + studentId + " already have an submission");
        }
        //do the assessment and student attempting exists or not
        Assessment assessment = assessmentRepository.findById(assessmentId).orElseThrow(() -> new IllegalArgumentException("Assessment not found"));
        User student = userRepository.findById(studentId).orElseThrow(() -> new IllegalArgumentException("Student not found"));

        List<Question> questions = assessment.getQuestions();
        if (answers.size() != questions.size()) {
            throw new IllegalArgumentException("All questions must be answered");
        }

        //you and assessment exists(yes), all the questions are answered (yes)

        //we can append your answers in database
        Submission submission = new Submission(assessment, student, answers);
        return submissionRepository.save(submission); //DB gives it an id and stores it
    }
    //2 Grading
    public Submission gradeSubmission(Long submissionId) {

        Submission submission = submissionRepository.findById(submissionId).orElseThrow(() -> new IllegalArgumentException("Submission not found") );

        //no re-grading is allowed
        if("GRADED".equals(submission.getStatus())) {
            throw new IllegalStateException("Submission has already been graded");
        }

        //now lets grade

        Assessment assessmentDetails= submission.getAssessment();
        List<Question> questionsDetails = assessmentDetails.getQuestions();
        Map<Long,String> studentAnswers = submission.getAnswers();

        int correctAnswers =0;
        for(Question question : questionsDetails){
            String correctAnswer = question.getCorrectAnswer();
            String studentAnswer = studentAnswers.get(question.getQuestionId());

            if(studentAnswer!=null && studentAnswer.equalsIgnoreCase(correctAnswer))
            {
                correctAnswers++;
            }
        }
        int percentageScored = ( correctAnswers/questionsDetails.size() ) * 100;
        submission.setScore(percentageScored);
        return submissionRepository.save(submission);

    }

    public Submission getSubmission(Long submissionId){
        return submissionRepository.findById(submissionId).orElseThrow( () -> new  IllegalArgumentException("Submission not found"));
    }

}
package com.example.shiksha.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Map;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Submission {

    @Id
    private long submissionId;

    @ManyToOne // many submission can be submitted by one student
    @JoinColumn(name="assessment_id")
    private Assessment assessment;

    @ManyToOne
    @JoinColumn(name="student_id")
    private User student;

    @ElementCollection
    @CollectionTable(name="submitted_answers", joinColumns = @JoinColumn(name="submission_id"))
    @MapKeyColumn(name="question_id")
    @Column(name="student_answers")
    private Map<Long,String> answers;

    private Integer score;

    private String status; //SUBMITTED or GRADED

    public Submission(Assessment assessment,User student, Map<Long,String> answers){
        this.assessment = assessment;
        this.student = student;
        this.answers = answers;
    }



}
